apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.3"
    defaultConfig {
        applicationId "org.cn.android"
        minSdkVersion 23
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        manifestPlaceholders = [
                KEY: "VALUE"
        ]

        vectorDrawables.useSupportLibrary = true
        // 65535
        multiDexEnabled true
        dexOptions {
            javaMaxHeapSize "4g"
        }
        ndk {
            abiFilters "armeabi", "armeabi-v7a", "x86", "mips"
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main.java.srcDirs += "src/main/kotlin"
    }

    flavorDimensions "product"

    productFlavors {
        dev {
            dimension "product"
            def props = getFilter("dev")
            props.propertyNames().each { name ->
                buildConfigField valueType(props.getProperty(name.toString())), name, props.getProperty(name.toString())
            }
        }
        local {
            dimension "product"
            def props = getFilter("local")
            props.propertyNames().each { name ->
                buildConfigField valueType(props.getProperty(name.toString())), name, props.getProperty(name.toString())
            }
        }
        product {
            dimension "product"
            def props = getFilter("product")
            props.propertyNames().each { name ->
                buildConfigField valueType(props.getProperty(name.toString())), name, props.getProperty(name.toString())
            }
        }
    }
}

def getFilter(key) {
    def environment = hasProperty('env') ? env : key
    Properties props = new Properties()
    props.load(new FileInputStream(file("src/main/filters/" + environment + ".properties")))
    return props
}

def valueType(value) {
    if ("true".equalsIgnoreCase(value) || "false".equalsIgnoreCase(value)) {
        return "boolean"
    } else if (value ==~ /\d+/) {
        return "int"
    } else {
        return "String"
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:25.3.1'
    testImplementation 'junit:junit:4.12'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.android.support:design:25.3.1'
    implementation 'com.android.support:multidex:1.0.1'
}
